# Cloud Build configuration for LEP Backend
# This file defines the CI/CD pipeline for automatic deployment

steps:
  # Step 1: Run tests
  - name: 'golang:1.22.5'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running Go tests..."
        go mod download
        go test ./... -v
        if [ $? -ne 0 ]; then
          echo "Tests failed, stopping build"
          exit 1
        fi
        echo "Tests passed successfully"
    id: 'run-tests'

  # Step 2: Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.prod'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/lep-backend:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/lep-backend:latest'
      - '.'
    id: 'build-image'
    waitFor: ['run-tests']

  # Step 3: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/lep-backend:${SHORT_SHA}'
    id: 'push-image-sha'
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/lep-backend:latest'
    id: 'push-image-latest'
    waitFor: ['build-image']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Determine environment based on branch
        if [ "${BRANCH_NAME}" = "main" ]; then
          ENV="prod"
        elif [ "${BRANCH_NAME}" = "staging" ]; then
          ENV="staging"
        else
          ENV="dev"
        fi

        echo "Deploying to environment: $$ENV"

        # Deploy to Cloud Run
        gcloud run deploy ${_SERVICE_NAME}-$$ENV \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/lep-backend:${SHORT_SHA} \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --service-account=${_SERVICE_ACCOUNT} \
          --set-env-vars="ENVIRONMENT=$$ENV" \
          --max-instances=${_MAX_INSTANCES} \
          --min-instances=${_MIN_INSTANCES} \
          --cpu=${_CPU_LIMIT} \
          --memory=${_MEMORY_LIMIT} \
          --timeout=${_TIMEOUT} \
          --concurrency=${_CONCURRENCY}
    id: 'deploy-cloud-run'
    waitFor: ['push-image-sha', 'push-image-latest']

  # Step 5: Run health check
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Determine environment based on branch
        if [ "${BRANCH_NAME}" = "main" ]; then
          ENV="prod"
        elif [ "${BRANCH_NAME}" = "staging" ]; then
          ENV="staging"
        else
          ENV="dev"
        fi

        echo "Running health check for environment: $$ENV"

        # Get service URL
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME}-$$ENV \
          --region=${_REGION} \
          --format='value(status.url)')

        echo "Service URL: $$SERVICE_URL"

        # Wait for service to be ready
        sleep 30

        # Health check
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$$(curl -s -o /dev/null -w "%{http_code}" "$$SERVICE_URL/health" || echo "000")

        if [ "$$HEALTH_RESPONSE" = "200" ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed (HTTP $$HEALTH_RESPONSE)"
          exit 1
        fi

        # Ping check
        echo "Testing ping endpoint..."
        PING_RESPONSE=$$(curl -s -o /dev/null -w "%{http_code}" "$$SERVICE_URL/ping" || echo "000")

        if [ "$$PING_RESPONSE" = "200" ]; then
          echo "‚úÖ Ping check passed"
        else
          echo "‚ùå Ping check failed (HTTP $$PING_RESPONSE)"
          exit 1
        fi

        echo "üöÄ Deployment successful! Service available at: $$SERVICE_URL"
    id: 'health-check'
    waitFor: ['deploy-cloud-run']

# Substitution variables
substitutions:
  # Project settings
  _REGION: 'us-central1'
  _REPOSITORY: 'lep-backend'

  # Service settings
  _SERVICE_NAME: 'lep-backend'
  _SERVICE_ACCOUNT: 'lep-backend-sa@${PROJECT_ID}.iam.gserviceaccount.com'

  # Resource limits
  _MAX_INSTANCES: '10'
  _MIN_INSTANCES: '0'
  _CPU_LIMIT: '1'
  _MEMORY_LIMIT: '512Mi'
  _TIMEOUT: '300'
  _CONCURRENCY: '100'

# Build options
options:
  # Use higher CPU for faster builds
  machineType: 'E2_HIGHCPU_8'

  # Enable logging
  logging: CLOUD_LOGGING_ONLY

  # Set timeout
  timeout: '1200s'

# Build triggers configuration (for reference)
# Create triggers using gcloud or console:
#
# Development trigger (dev branch):
# gcloud builds triggers create github \
#   --repo-name=LEP-Back \
#   --repo-owner=YOUR_GITHUB_USERNAME \
#   --branch-pattern="^dev$" \
#   --build-config=cloudbuild.yaml \
#   --name=lep-backend-dev
#
# Staging trigger (staging branch):
# gcloud builds triggers create github \
#   --repo-name=LEP-Back \
#   --repo-owner=YOUR_GITHUB_USERNAME \
#   --branch-pattern="^staging$" \
#   --build-config=cloudbuild.yaml \
#   --name=lep-backend-staging
#
# Production trigger (main branch):
# gcloud builds triggers create github \
#   --repo-name=LEP-Back \
#   --repo-owner=YOUR_GITHUB_USERNAME \
#   --branch-pattern="^main$" \
#   --build-config=cloudbuild.yaml \
#   --name=lep-backend-prod

# IAM permissions required for Cloud Build service account:
# - Cloud Run Admin
# - Artifact Registry Writer
# - Cloud SQL Client (if accessing database)
# - Secret Manager Secret Accessor
# - Service Account User